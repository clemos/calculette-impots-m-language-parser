comment = r'\#.*'

symbol = r'\w+'
symbol_enumeration = symbol ("," symbol)*
float = r'\d+\.\d+'
integer = r'\d+'
string = '"' r'[^"]*' '"'
integer_range = integer ".." integer
brackets = "[" symbol "]"

symbol_or_integer_range = (integer_range / symbol)
loop_variable_domain = symbol_or_integer_range ("," symbol_or_integer_range)*
loop_variable1 = "un" symbol "dans" loop_variable_domain
loop_variable2 =  symbol "=" loop_variable_domain
loop_variables = (loop_variable1 ("et" loop_variable1)*) / (loop_variable2 (";" loop_variable2)*)

application_declaration = "application" symbol ";"
applications_reference = "application" ":" symbol_enumeration
enchaineur_declaration = "enchaineur" symbol applications_reference ";"

alias = "alias" symbol
attribute = symbol "=" integer
tableau = "tableau[" integer "]"
type = "type" ("BOOLEEN" / "DATE_AAAA" / "DATE_JJMMAAAA" / "DATE_MM" / "ENTIER" / "REEL")
variable_calculee_tags = ("base" / "restituee")*
variable_calculee_declaration = symbol ":" tableau? "calculee" variable_calculee_tags ":" string type? ";"
variable_const_declaration = symbol ":" "const" "=" float ";"
variable_saisie_declaration = symbol ":" "saisie" ("contexte" / "famille" / "penalite" / "revenu")+ attribute* "restituee"? alias ":" string type? ";"
variable_declaration = (variable_calculee_declaration / variable_const_declaration / variable_saisie_declaration)

litteral = float / (integer !r'\w') / symbol
loop_expression = loop_variables ":" expression
function_parameters = expression ("," expression)*
function_call = symbol "(" (loop_expression / function_parameters) ")"
ternary_operator = "si" expression "alors" expression ("sinon" expression)? "finsi"
pour_operator = "pour" loop_expression
unary = ("+" / "-")
group = "(" expression ")"
factor = unary? (pour_operator / ternary_operator / function_call / (symbol brackets) / litteral / group)
product = factor (("*" / "/") factor)*
sum = product (("+" / "-") product)*
comparaison = sum ((">=" / "<=" / "!=" / ">" / "<" / "=") sum)?
dans = comparaison (("non"? "dans") "(" loop_variable_domain ")")?
expression = dans (("et" / "ou") dans)*

variable_definition = symbol brackets? "=" expression ";"
pour_variable_definition = "pour" loop_variables ":" variable_definition
regle_enchaineur = "enchaineur" ":" symbol ";"
regle_declaration = "regle" symbol+ ":" applications_reference ";" regle_enchaineur? (pour_variable_definition / variable_definition)+

verif_declaration_erreurs = "erreur" symbol*
verif_declaration_condition = "si" expression "alors" verif_declaration_erreurs ";"
verif_declaration = "verif" symbol+ ":" applications_reference ";" verif_declaration_condition+

erreur_type = ("anomalie" / "discordance" / "informative")
erreur_declaration = symbol ":" erreur_type ":" string ":" string ":" string ":" string ":" string ";"

m_source_file = (comment / application_declaration / enchaineur_declaration / variable_declaration / regle_declaration / verif_declaration / erreur_declaration)+ EOF
