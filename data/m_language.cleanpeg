comment = r'\#.*'

symbol = r'\w+'
symbol_enumeration = symbol ("," symbol)*
symbols_enumeration = symbol ("," symbol)+
float = r'\d+\.\d+'
integer = r'\d+'
string = '"' r'[^"]*' '"'
integer_range = integer ".." integer

application_declaration = "application" symbol ";"
enchaineur_declaration = "enchaineur" symbol "application:" symbol_enumeration  ";"

alias = "alias" symbol
attribute = symbol "=" integer
tableau = "tableau[" integer "]"
type = "type" ("BOOLEEN" / "DATE_AAAA" / "DATE_JJMMAAAA" / "DATE_MM" / "ENTIER" / "REEL")
variable_calculee_qualifiers = ("base" / "restituee")*
variable_calculee_declaration = symbol ":" tableau? "calculee" variable_calculee_qualifiers ":" string type? ";"
variable_const_declaration = symbol ":" "const" "=" float ";"
variable_saisie_declaration = symbol ":" "saisie" ("contexte" / "famille" / "penalite" / "revenu")+ attribute* "restituee"? alias ":" string type? ";"
variable_declaration = (variable_calculee_declaration / variable_const_declaration / variable_saisie_declaration)

expression = r'[^;]+'
variable_definition = symbol "=" expression ";"
pour_variable_definition = "pour" symbol "=" (symbols_enumeration / integer_range) ":" variable_definition
regle_isf_qualifier = "isf"
regle_declaration = "regle" regle_isf_qualifier? integer ":" "application" ":" symbol_enumeration ";" (variable_definition / pour_variable_definition)+

root = (comment / application_declaration / enchaineur_declaration / variable_declaration / regle_declaration)+ EOF
