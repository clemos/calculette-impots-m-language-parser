[
  {
    "type": "comment",
    "value": "#*************************************************************************************************************************",
    "linecol": [
      1,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      2,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Copyright or © or Copr.[DGFIP][2015]",
    "linecol": [
      3,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      4,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel a été initialement développé par la Direction Générale des ",
    "linecol": [
      5,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Finances Publiques pour permettre le calcul de l'impôt sur le revenu 2015 ",
    "linecol": [
      6,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#au titre des revenus perçus en 2014. La présente version a permis la ",
    "linecol": [
      7,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#génération du moteur de calcul des chaînes de taxation des rôles d'impôt ",
    "linecol": [
      8,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#sur le revenu de ce millésime.",
    "linecol": [
      9,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      10,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel est régi par la licence CeCILL 2.1 soumise au droit français ",
    "linecol": [
      11,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#et respectant les principes de diffusion des logiciels libres. Vous pouvez ",
    "linecol": [
      12,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#utiliser, modifier et/ou redistribuer ce programme sous les conditions de ",
    "linecol": [
      13,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#la licence CeCILL 2.1 telle que diffusée par le CEA, le CNRS et l'INRIA  sur ",
    "linecol": [
      14,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#le site \"http://www.cecill.info\".",
    "linecol": [
      15,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      16,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris ",
    "linecol": [
      17,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#connaissance de la licence CeCILL 2.1 et que vous en avez accepté les termes.",
    "linecol": [
      18,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      19,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#**************************************************************************************************************************",
    "linecol": [
      20,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      21,
      2
    ]
  },
  {
    "type": "comment",
    "value": "#     CHAPITRE 2. CALCUL DU NET A PAYER",
    "linecol": [
      22,
      2
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      23,
      2
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      24,
      2
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      25,
      2
    ]
  },
  {
    "name": {
      "type": "symbol",
      "name": "20100",
      "linecol": [
        26,
        7
      ]
    },
    "linecol": [
      26,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "( IRN + PIR - IRANT )* (1 - INDTXMIN) *(1 - INDTXMOY) + min(0, IRN + PIR - IRANT) * (INDTXMIN + INDTXMOY) + max(0, IRN + PIR - IRANT) * (INDTXMIN*positif((IAVIMBIS-NAPCRPAVIM)-SEUIL_61 ) + INDTXMOY* positif((IAVIMO-NAPCRPAVIM)-SEUIL_61)) + RASAR * V_CR2",
          "linecol": [
            28,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "NAPINI",
          "linecol": [
            28,
            1
          ]
        },
        "linecol": [
          28,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif( NAPINI + 1 - SEUIL_12 )",
          "linecol": [
            34,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RC1INI",
          "linecol": [
            34,
            1
          ]
        },
        "linecol": [
          34,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            27,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            27,
            22
          ]
        }
      ],
      "linecol": [
        27,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20101",
      "linecol": [
        35,
        7
      ]
    },
    "linecol": [
      35,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "IRCUM + TAXACUM + PCAPCUM + TAXLOYCUM + HAUTREVCUM  - RECUMIR",
          "linecol": [
            37,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "NAPTOT",
          "linecol": [
            37,
            1
          ]
        },
        "linecol": [
          37,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            36,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            36,
            22
          ]
        }
      ],
      "linecol": [
        36,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20103",
      "linecol": [
        38,
        7
      ]
    },
    "linecol": [
      38,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "V_IRPSANT - V_ANTRE",
          "linecol": [
            40,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "NAPTOTA",
          "linecol": [
            40,
            1
          ]
        },
        "linecol": [
          40,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "V_TOTIRANT - V_ANTREIR",
          "linecol": [
            41,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "NAPTOTAIR",
          "linecol": [
            41,
            1
          ]
        },
        "linecol": [
          41,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "V_ANTCR",
          "linecol": [
            42,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTCRA",
          "linecol": [
            42,
            1
          ]
        },
        "linecol": [
          42,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "V_IRPSANT - V_NONMERANT + V_NONRESTANT - V_ANTRE",
          "linecol": [
            43,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTIRPSANT",
          "linecol": [
            43,
            1
          ]
        },
        "linecol": [
          43,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            39,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            39,
            22
          ]
        }
      ],
      "linecol": [
        39,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20104",
      "linecol": [
        44,
        7
      ]
    },
    "linecol": [
      44,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "IRNIN",
          "linecol": [
            46,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "OCEDIMP",
          "linecol": [
            46,
            1
          ]
        },
        "linecol": [
          46,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            45,
            15
          ]
        }
      ],
      "linecol": [
        45,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20105",
      "linecol": [
        47,
        7
      ]
    },
    "linecol": [
      47,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(IRN - IRANT) * positif(IRN - IRANT)",
          "linecol": [
            49,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "IRNIN",
          "linecol": [
            49,
            1
          ]
        },
        "linecol": [
          49,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            48,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            48,
            22
          ]
        }
      ],
      "linecol": [
        48,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "201050",
      "linecol": [
        50,
        11
      ]
    },
    "linecol": [
      50,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "ISF4BIS * positif_ou_nul(ISF4BIS - SEUIL_12)",
          "linecol": [
            52,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ISF4BASE",
          "linecol": [
            52,
            1
          ]
        },
        "linecol": [
          52,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "ISF4BASE",
          "linecol": [
            53,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ISFIN",
          "linecol": [
            53,
            1
          ]
        },
        "linecol": [
          53,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            51,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            51,
            22
          ]
        }
      ],
      "linecol": [
        51,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": [
      {
        "type": "symbol",
        "name": "isf",
        "linecol": [
          50,
          7
        ]
      }
    ]
  },
  {
    "name": {
      "type": "symbol",
      "name": "201051",
      "linecol": [
        54,
        7
      ]
    },
    "linecol": [
      54,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "max(0,IRN - IRANT - IR9YI) * positif(IRN - IRANT)",
          "linecol": [
            56,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "IRNIN_INR",
          "linecol": [
            56,
            1
          ]
        },
        "linecol": [
          56,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,CSG - CSGIM  - CS9YP)",
          "linecol": [
            57,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CSBASE_INR",
          "linecol": [
            57,
            1
          ]
        },
        "linecol": [
          57,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,RDSN - CRDSIM  - RD9YP)",
          "linecol": [
            58,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RDBASE_INR",
          "linecol": [
            58,
            1
          ]
        },
        "linecol": [
          58,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PRS - PRSPROV  - PS9YP)",
          "linecol": [
            59,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PSBASE_INR",
          "linecol": [
            59,
            1
          ]
        },
        "linecol": [
          59,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,CVNSALC - COD8YT  - CVN9YP)",
          "linecol": [
            60,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CVNBASE_INR",
          "linecol": [
            60,
            1
          ]
        },
        "linecol": [
          60,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,CDIS - CDISPROV  - CDIS9YP)",
          "linecol": [
            61,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CDISBASE_INR",
          "linecol": [
            61,
            1
          ]
        },
        "linecol": [
          61,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,CGLOA - COD8YL  - GLO9YP)",
          "linecol": [
            62,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "GLOBASE_INR",
          "linecol": [
            62,
            1
          ]
        },
        "linecol": [
          62,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,BREGV - REGV9YP)",
          "linecol": [
            63,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REGVBASE_INR",
          "linecol": [
            63,
            1
          ]
        },
        "linecol": [
          63,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,RSE1N - CSPROVYD - RSE19YP)",
          "linecol": [
            64,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE1BASE_INR",
          "linecol": [
            64,
            1
          ]
        },
        "linecol": [
          64,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0, max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA -CIRSE8SA - CSPROVYN) - RSE29YP)",
          "linecol": [
            65,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE2BASE_INR",
          "linecol": [
            65,
            1
          ]
        },
        "linecol": [
          65,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,RSE3N - CSPROVYG - RSE39YP)",
          "linecol": [
            66,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE3BASE_INR",
          "linecol": [
            66,
            1
          ]
        },
        "linecol": [
          66,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0, max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB -CIRSE8SB - CSPROVYP) - RSE49YP)",
          "linecol": [
            67,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE4BASE_INR",
          "linecol": [
            67,
            1
          ]
        },
        "linecol": [
          67,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,RSE5N - CSPROVYE - RSE59YP)",
          "linecol": [
            68,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE5BASE_INR",
          "linecol": [
            68,
            1
          ]
        },
        "linecol": [
          68,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXASSUR - TAXA9YI + min(0,IRN - IRANT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            69,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TAXABASE_INR",
          "linecol": [
            69,
            1
          ]
        },
        "linecol": [
          69,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IPCAPTAXT - CAP9YI + min(0,IRN - IRANT + TAXASSUR),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            70,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCAPBASE_INR",
          "linecol": [
            70,
            1
          ]
        },
        "linecol": [
          70,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXLOY - LOY9YI + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            71,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "LOYBASE_INR",
          "linecol": [
            71,
            1
          ]
        },
        "linecol": [
          71,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IHAUTREVT - CHR9YI + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT+TAXLOY),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            72,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CHRBASE_INR",
          "linecol": [
            72,
            1
          ]
        },
        "linecol": [
          72,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "CSG - CSGIM",
          "linecol": [
            73,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CSBASE",
          "linecol": [
            73,
            1
          ]
        },
        "linecol": [
          73,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RDSN - CRDSIM",
          "linecol": [
            74,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RDBASE",
          "linecol": [
            74,
            1
          ]
        },
        "linecol": [
          74,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PRS - PRSPROV",
          "linecol": [
            75,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PSBASE",
          "linecol": [
            75,
            1
          ]
        },
        "linecol": [
          75,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "CVNSALC - COD8YT",
          "linecol": [
            76,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CVNBASE",
          "linecol": [
            76,
            1
          ]
        },
        "linecol": [
          76,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "CDIS - CDISPROV",
          "linecol": [
            77,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CDISBASE",
          "linecol": [
            77,
            1
          ]
        },
        "linecol": [
          77,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "CGLOA - COD8YL",
          "linecol": [
            78,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "GLOBASE",
          "linecol": [
            78,
            1
          ]
        },
        "linecol": [
          78,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RSE1N - CSPROVYD",
          "linecol": [
            79,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE1BASE",
          "linecol": [
            79,
            1
          ]
        },
        "linecol": [
          79,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0, RSE8TV - CIRSE8TV - CSPROVYF) + max(0, RSE8SA - CIRSE8SA - CSPROVYN)",
          "linecol": [
            80,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE2BASE",
          "linecol": [
            80,
            1
          ]
        },
        "linecol": [
          80,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RSE3N - CSPROVYG",
          "linecol": [
            81,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE3BASE",
          "linecol": [
            81,
            1
          ]
        },
        "linecol": [
          81,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0, RSE8TX - CIRSE8TX - CSPROVYH) + max(0, RSE8SB -CIRSE8SB - CSPROVYP)",
          "linecol": [
            82,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE4BASE",
          "linecol": [
            82,
            1
          ]
        },
        "linecol": [
          82,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RSE5N - CSPROVYE",
          "linecol": [
            83,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RSE5BASE",
          "linecol": [
            83,
            1
          ]
        },
        "linecol": [
          83,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "BREGV",
          "linecol": [
            84,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REGVBASE",
          "linecol": [
            84,
            1
          ]
        },
        "linecol": [
          84,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXASSUR + min(0,IRN - IRANT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            85,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TAXABASE",
          "linecol": [
            85,
            1
          ]
        },
        "linecol": [
          85,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IPCAPTAXT + min(0,IRN - IRANT + TAXASSUR),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            86,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCAPBASE",
          "linecol": [
            86,
            1
          ]
        },
        "linecol": [
          86,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXLOY + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            87,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "LOYBASE",
          "linecol": [
            87,
            1
          ]
        },
        "linecol": [
          87,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IHAUTREVT + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT+TAXLOY),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            88,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CHRBASE",
          "linecol": [
            88,
            1
          ]
        },
        "linecol": [
          88,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(IRN -IRANT)*positif(IRN+1-SEUIL_12)",
          "linecol": [
            90,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "IRBASE_I",
          "linecol": [
            90,
            1
          ]
        },
        "linecol": [
          90,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(IRN - IRANT)*(1 - positif (IRN-IRANT + TAXABASE_IRECT+CAPBASE_IRECT+HRBASE_IRECT)) + (IAN - min( IAN , IRE )) * positif (IRN-IRANT + TAXABASE_IRECT+CAPBASE_IRECT+HRBASE_IRECT)",
          "linecol": [
            92,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "IRBASE_N",
          "linecol": [
            92,
            1
          ]
        },
        "linecol": [
          92,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "TAXASSUR * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            94,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TAXABASE_I",
          "linecol": [
            94,
            1
          ]
        },
        "linecol": [
          94,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXASSUR + min(0,IRN - IRANT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            95,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TAXABASE_N",
          "linecol": [
            95,
            1
          ]
        },
        "linecol": [
          95,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "IPCAPTAXT * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            96,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CAPBASE_I",
          "linecol": [
            96,
            1
          ]
        },
        "linecol": [
          96,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IPCAPTAXT + min(0,IRN - IRANT + TAXASSUR),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            97,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "CAPBASE_N",
          "linecol": [
            97,
            1
          ]
        },
        "linecol": [
          97,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "TAXLOY * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            98,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "LOYBASE_I",
          "linecol": [
            98,
            1
          ]
        },
        "linecol": [
          98,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(TAXLOY + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            99,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "LOYBASE_N",
          "linecol": [
            99,
            1
          ]
        },
        "linecol": [
          99,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "IHAUTREVT * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            100,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "HRBASE_I",
          "linecol": [
            100,
            1
          ]
        },
        "linecol": [
          100,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(max(IHAUTREVT + min(0,IRN - IRANT + TAXASSUR+IPCAPTAXT+TAXLOY),0)) * positif(IAMD1 + 1 - SEUIL_61)",
          "linecol": [
            101,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "HRBASE_N",
          "linecol": [
            101,
            1
          ]
        },
        "linecol": [
          101,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "IRNIN",
          "linecol": [
            103,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "IRNN",
          "linecol": [
            103,
            1
          ]
        },
        "linecol": [
          103,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            55,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            55,
            22
          ]
        }
      ],
      "linecol": [
        55,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20106",
      "linecol": [
        105,
        7
      ]
    },
    "linecol": [
      105,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "( INCIR_NET + NMAJ1 + NMAJ3 + NMAJ4 + arr((BTOINR) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) ",
          "linecol": [
            107,
            7
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PIR",
          "linecol": [
            107,
            1
          ]
        },
        "linecol": [
          107,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCPS_NET + NMAJP1 + NMAJP4 + arr(max(0,PRS-PRSPROV-PS9YP) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            112,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPRS",
          "linecol": [
            112,
            1
          ]
        },
        "linecol": [
          112,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCCS_NET + NMAJC1 + NMAJC4 + arr(max(0,CSG-CSGIM-CS9YP) * TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            116,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCSG",
          "linecol": [
            116,
            1
          ]
        },
        "linecol": [
          116,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRD_NET + NMAJR1 + NMAJR4 + arr(max(0,RDSN-CRDSIM-RD9YP) * TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            120,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRDS",
          "linecol": [
            120,
            1
          ]
        },
        "linecol": [
          120,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCCVN_NET + NMAJCVN1 + NMAJCVN4 + arr(max(0,(CVNSALC - COD8YT)-CVN9YP) * TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            124,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCVN",
          "linecol": [
            124,
            1
          ]
        },
        "linecol": [
          124,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCREGV_NET + NMAJREGV1 + NMAJREGV4 + arr( max(0,BREGV - REGV9YP) * TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            128,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PREGV",
          "linecol": [
            128,
            1
          ]
        },
        "linecol": [
          128,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCTAXA_NET + NMAJTAXA1 + NMAJTAXA3 + NMAJTAXA4 + arr(max(0,TAXASSUR- min(TAXASSUR+0,max(0,INE-IRB+AVFISCOPTER))+min(0,IRN - IRANT)-TAXA9YI) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)))",
          "linecol": [
            133,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXA",
          "linecol": [
            133,
            1
          ]
        },
        "linecol": [
          133,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCPCAP_NET + NMAJPCAP1 + NMAJPCAP3 + NMAJPCAP4 + arr(max(0,IPCAPTAXT- min(IPCAPTAXT+0,max(0,INE-IRB+AVFISCOPTER-TAXASSUR))+min(0,IRN - IRANT+TAXASSUR)-CAP9YI) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)))",
          "linecol": [
            137,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPCAP",
          "linecol": [
            137,
            1
          ]
        },
        "linecol": [
          137,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCLOY_NET + NMAJLOY1 + NMAJLOY3 + NMAJLOY4 + arr(max(0,LOYELEV- min(LOYELEV+0,max(0,INE-IRB+AVFISCOPTER-TAXASSUR-IPCAPTAXT))+min(0,IRN - IRANT+TAXASSUR+IPCAPTAXT)-LOY9YI) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)))",
          "linecol": [
            141,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXLOY",
          "linecol": [
            141,
            1
          ]
        },
        "linecol": [
          141,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCCHR_NET + NMAJCHR1 + NMAJCHR3 + NMAJCHR4 + arr(max(0,IHAUTREVT+min(0,IRN - IRANT+TAXASSUR+IPCAPTAXT+LOYELEV)-CHR9YI) * TXINT / 100)* (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)))",
          "linecol": [
            145,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PHAUTREV",
          "linecol": [
            145,
            1
          ]
        },
        "linecol": [
          145,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCGLOA_NET + NMAJGLO1 + NMAJGLO4 + arr((max(0,CGLOA  - COD8YL-GLO9YP)* TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            149,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PGLOA",
          "linecol": [
            149,
            1
          ]
        },
        "linecol": [
          149,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRSE1_NET + NMAJRSE11 + NMAJRSE14 + arr(max(0,RSE1 -CIRSE1 -CSPROVYD-RSE19YP)* TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            153,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE1",
          "linecol": [
            153,
            1
          ]
        },
        "linecol": [
          153,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRSE2_NET + NMAJRSE21 + NMAJRSE24 + arr(max(0,(max(0,RSE8TV -CIRSE8TV -CSPROVYF)+ max(0, RSE8SA -CIRSE8SA - CSPROVYN)-RSE29YP)) * TXINT / 100 ) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)) ) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            157,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE2",
          "linecol": [
            157,
            1
          ]
        },
        "linecol": [
          157,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRSE3_NET + NMAJRSE31 + NMAJRSE34 + arr(max(0,RSE3 -CIRSE3 -CSPROVYG-RSE39YP)* TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            163,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE3",
          "linecol": [
            163,
            1
          ]
        },
        "linecol": [
          163,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRSE4_NET + NMAJRSE41 + NMAJRSE44 + arr(max(0,max(0,RSE8TX -CIRSE8TX -CSPROVYH)+ max(0, RSE8SB -CIRSE8SB - CSPROVYP)-RSE49YP) * TXINT / 100 ) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT)) ) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            167,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE4",
          "linecol": [
            167,
            1
          ]
        },
        "linecol": [
          167,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCRSE5_NET + NMAJRSE51 + NMAJRSE54 + arr(max(0,RSE5 -CIRSE5 -CSPROVYE-RSE59YP)* TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            173,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE5",
          "linecol": [
            173,
            1
          ]
        },
        "linecol": [
          173,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "( INCCDIS_NET + NMAJCDIS1 + NMAJCDIS4 + arr(max(0,CDIS-CDISPROV-CDIS9YP) * TXINT / 100) * (1-positif(FLAG_PRIM+FLAG_RETARD+FLAG_DEFAUT))) * positif_ou_nul(CSTOTSSPENA - SEUIL_61)",
          "linecol": [
            177,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCDIS",
          "linecol": [
            177,
            1
          ]
        },
        "linecol": [
          177,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PIR_A + PTAXA_A + PPCAP_A - PTAXLOY_A - PCHR_A - PIR - PTAXA - PPCAP - PTAXLOY - PHAUTREV)",
          "linecol": [
            182,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PDEG",
          "linecol": [
            182,
            1
          ]
        },
        "linecol": [
          182,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            106,
            15
          ]
        }
      ],
      "linecol": [
        106,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "201061",
      "linecol": [
        184,
        7
      ]
    },
    "linecol": [
      184,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP + PPRS + PCSG + PRDS + PCDIS + PREGV + PCVN + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5",
          "linecol": [
            186,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTOTIRCS",
          "linecol": [
            186,
            1
          ]
        },
        "linecol": [
          186,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PIR + PTAXA + PTAXLOY + PHAUTREV + PPCAP",
          "linecol": [
            190,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTPENIR",
          "linecol": [
            190,
            1
          ]
        },
        "linecol": [
          190,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PPRS+ PCSG + PRDS + PCVN + PREGV + PCDIS + PGLOA + PRSE1 + PRSE2 + PRSE3 + PRSE4 + PRSE5",
          "linecol": [
            192,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTPENCS",
          "linecol": [
            192,
            1
          ]
        },
        "linecol": [
          192,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RETIR + RETTAXA + RETPCAP + RETLOY + RETHAUTREV",
          "linecol": [
            194,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "INCTOTIR",
          "linecol": [
            194,
            1
          ]
        },
        "linecol": [
          194,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RETCS+RETRD+RETPS+RETCVN+RETREGV+RETCDIS+RETGLOA +RETRSE1+RETRSE2+RETRSE3+RETRSE4+RETRSE5",
          "linecol": [
            196,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "INCTOTCS",
          "linecol": [
            196,
            1
          ]
        },
        "linecol": [
          196,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "INCTOTIR + INCTOTCS",
          "linecol": [
            199,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RETIRCSTOT",
          "linecol": [
            199,
            1
          ]
        },
        "linecol": [
          199,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            185,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            185,
            23
          ]
        }
      ],
      "linecol": [
        185,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20107",
      "linecol": [
        201,
        7
      ]
    },
    "linecol": [
      201,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "PTOIR * positif_ou_nul(IAMD1 - SEUIL_61)",
          "linecol": [
            203,
            7
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PIR",
          "linecol": [
            203,
            1
          ]
        },
        "linecol": [
          203,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOPRS",
          "linecol": [
            204,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPRS",
          "linecol": [
            204,
            1
          ]
        },
        "linecol": [
          204,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOCSG",
          "linecol": [
            205,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCSG",
          "linecol": [
            205,
            1
          ]
        },
        "linecol": [
          205,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORSE1",
          "linecol": [
            206,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE1",
          "linecol": [
            206,
            1
          ]
        },
        "linecol": [
          206,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORSE2",
          "linecol": [
            207,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE2",
          "linecol": [
            207,
            1
          ]
        },
        "linecol": [
          207,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORSE3",
          "linecol": [
            208,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE3",
          "linecol": [
            208,
            1
          ]
        },
        "linecol": [
          208,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORSE4",
          "linecol": [
            209,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE4",
          "linecol": [
            209,
            1
          ]
        },
        "linecol": [
          209,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORSE5",
          "linecol": [
            210,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRSE5",
          "linecol": [
            210,
            1
          ]
        },
        "linecol": [
          210,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOREGV",
          "linecol": [
            211,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PREGV",
          "linecol": [
            211,
            1
          ]
        },
        "linecol": [
          211,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTORDS",
          "linecol": [
            212,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PRDS",
          "linecol": [
            212,
            1
          ]
        },
        "linecol": [
          212,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOTAXA",
          "linecol": [
            213,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXA",
          "linecol": [
            213,
            1
          ]
        },
        "linecol": [
          213,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOTPCAP",
          "linecol": [
            214,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPCAP",
          "linecol": [
            214,
            1
          ]
        },
        "linecol": [
          214,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOTLOY",
          "linecol": [
            215,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXLOY",
          "linecol": [
            215,
            1
          ]
        },
        "linecol": [
          215,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOTCHR",
          "linecol": [
            216,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PHAUTREV",
          "linecol": [
            216,
            1
          ]
        },
        "linecol": [
          216,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOCVN",
          "linecol": [
            217,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCVN",
          "linecol": [
            217,
            1
          ]
        },
        "linecol": [
          217,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOCDIS",
          "linecol": [
            218,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PCDIS",
          "linecol": [
            218,
            1
          ]
        },
        "linecol": [
          218,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "PTOGLOA",
          "linecol": [
            219,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PGLOA",
          "linecol": [
            219,
            1
          ]
        },
        "linecol": [
          219,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            202,
            15
          ]
        }
      ],
      "linecol": [
        202,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20109",
      "linecol": [
        221,
        7
      ]
    },
    "linecol": [
      221,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "PIR",
          "linecol": [
            223,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTOT",
          "linecol": [
            223,
            1
          ]
        },
        "linecol": [
          223,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            222,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            222,
            23
          ]
        }
      ],
      "linecol": [
        222,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20110",
      "linecol": [
        224,
        7
      ]
    },
    "linecol": [
      224,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR) * max(0 , IRCUM - NONMER + NONREST - PIR) + (1 - positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)) * (TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)",
          "linecol": [
            226,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_IR",
          "linecol": [
            226,
            1
          ]
        },
        "linecol": [
          226,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "abs(min(0 , IRCUM - NONMER + NONREST - PIR))",
          "linecol": [
            229,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PIRNEG",
          "linecol": [
            229,
            1
          ]
        },
        "linecol": [
          229,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR) * max(0,TAXACUM - PTAXA - PIRNEG) + (1 - positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)) * 0",
          "linecol": [
            231,
            17
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_TAXA",
          "linecol": [
            231,
            1
          ]
        },
        "linecol": [
          231,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "abs(min(0 , TAXACUM - PTAXA - PIRNEG))",
          "linecol": [
            234,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXANEG",
          "linecol": [
            234,
            1
          ]
        },
        "linecol": [
          234,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR) * max(0 , PCAPCUM - PPCAP - PTAXANEG) + (1 - positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)) * 0",
          "linecol": [
            236,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_CAP",
          "linecol": [
            236,
            1
          ]
        },
        "linecol": [
          236,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "abs(min(0 , PCAPCUM - PPCAP - PTAXANEG))",
          "linecol": [
            239,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPCAPNEG",
          "linecol": [
            239,
            1
          ]
        },
        "linecol": [
          239,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR) * max(0 , TAXLOYCUM - PTAXLOY - PPCAPNEG) + (1 - positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)) * 0",
          "linecol": [
            241,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_LOY",
          "linecol": [
            241,
            1
          ]
        },
        "linecol": [
          241,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "abs(min(0 , TAXLOYCUM - PTAXLOY - PPCAPNEG))",
          "linecol": [
            244,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXLOYNEG",
          "linecol": [
            244,
            1
          ]
        },
        "linecol": [
          244,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR) * max(0 , HAUTREVCUM - PHAUTREV - PTAXLOYNEG) + (1 - positif(TOTIRCUM - NONMER - RECUMIR + NONREST - TOTPENIR)) * 0",
          "linecol": [
            246,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_CHR",
          "linecol": [
            246,
            1
          ]
        },
        "linecol": [
          246,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "ILI_SYNT_IR + ILI_SYNT_TAXA + ILI_SYNT_CAP + ILI_SYNT_LOY + ILI_SYNT_CHR",
          "linecol": [
            249,
            18
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILI_SYNT_TOTIR",
          "linecol": [
            249,
            1
          ]
        },
        "linecol": [
          249,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            225,
            15
          ]
        }
      ],
      "linecol": [
        225,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "201101",
      "linecol": [
        251,
        7
      ]
    },
    "linecol": [
      251,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0,IRCUM-PIR) + (1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR)) * (TOTIRCUM - RECUMIR - TOTPENIR)",
          "linecol": [
            254,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILIIRNET",
          "linecol": [
            254,
            1
          ]
        },
        "linecol": [
          254,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PIR-IRCUM)",
          "linecol": [
            257,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PIRNETNEG",
          "linecol": [
            257,
            1
          ]
        },
        "linecol": [
          257,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0,TAXACUM - PTAXA - PIRNETNEG) + (1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR)) * 0",
          "linecol": [
            259,
            14
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILITAXANET",
          "linecol": [
            259,
            1
          ]
        },
        "linecol": [
          259,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PIR+PTAXA-IRCUM-TAXACUM)",
          "linecol": [
            262,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXANETNEG",
          "linecol": [
            262,
            1
          ]
        },
        "linecol": [
          262,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0,PCAPCUM -PPCAP-PTAXANETNEG) + (1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR)) * 0",
          "linecol": [
            264,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILICAPNET",
          "linecol": [
            264,
            1
          ]
        },
        "linecol": [
          264,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PIR+PTAXA+PPCAP-IRCUM-TAXACUM-PCAPCUM)",
          "linecol": [
            267,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PPCAPNETNEG",
          "linecol": [
            267,
            1
          ]
        },
        "linecol": [
          267,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0,TAXLOYCUM-PTAXLOY-PPCAPNETNEG) + (1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR)) * 0",
          "linecol": [
            269,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILILOYNET",
          "linecol": [
            269,
            1
          ]
        },
        "linecol": [
          269,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,PIR+PTAXA+PPCAP+PTAXLOY-IRCUM-TAXACUM-PCAPCUM-TAXLOYCUM)",
          "linecol": [
            272,
            18
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "PTAXLOYNETNEG",
          "linecol": [
            272,
            1
          ]
        },
        "linecol": [
          272,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR) * max(0,HAUTREVCUM-PHAUTREV-PTAXLOYNETNEG) + (1 - positif_ou_nul(TOTIRCUM - RECUMIR - TOTPENIR)) * 0",
          "linecol": [
            274,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILICHRNET",
          "linecol": [
            274,
            1
          ]
        },
        "linecol": [
          274,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "ILIIRNET + ILITAXANET + ILICAPNET + ILILOYNET + ILICHRNET",
          "linecol": [
            277,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILITOTIRNET",
          "linecol": [
            277,
            1
          ]
        },
        "linecol": [
          277,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0, NAPCR61 - TOTPENCS)",
          "linecol": [
            279,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ILITOTPSNET",
          "linecol": [
            279,
            1
          ]
        },
        "linecol": [
          279,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "IREP - ITRED - IRE - INE",
          "linecol": [
            281,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTIRE",
          "linecol": [
            281,
            1
          ]
        },
        "linecol": [
          281,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "TTPVQ + REVTP",
          "linecol": [
            283,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOTTP",
          "linecol": [
            283,
            1
          ]
        },
        "linecol": [
          283,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            252,
            15
          ]
        },
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            252,
            23
          ]
        }
      ],
      "linecol": [
        252,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "201102",
      "linecol": [
        285,
        7
      ]
    },
    "linecol": [
      285,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "NMAJ1     + NMAJTAXA1 + NMAJPCAP1 + NMAJLOY1  + NMAJCHR1",
          "linecol": [
            289,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "MAJOTOT28IR",
          "linecol": [
            289,
            1
          ]
        },
        "linecol": [
          289,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "NMAJC1 + NMAJR1    + NMAJP1    + NMAJCVN1  + NMAJREGV1  + NMAJCDIS1 + NMAJGLO1  + NMAJRSE11 + NMAJRSE21 + NMAJRSE31 + NMAJRSE41 + NMAJRSE51",
          "linecol": [
            295,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "MAJOTOT28PS",
          "linecol": [
            295,
            1
          ]
        },
        "linecol": [
          295,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "MAJOTOT28IR + MAJOTOT28PS",
          "linecol": [
            308,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "MAJO1728TOT",
          "linecol": [
            308,
            1
          ]
        },
        "linecol": [
          308,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "batch",
          "linecol": [
            286,
            15
          ]
        }
      ],
      "linecol": [
        286,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  },
  {
    "name": {
      "type": "symbol",
      "name": "20111",
      "linecol": [
        310,
        7
      ]
    },
    "linecol": [
      310,
      1
    ],
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "BAFV + BAFC + BAFP + BAHREV - (BAHDEV * (1 - positif(ART1731BIS) )) + BAHREC - (BAHDEC * (1 - positif(ART1731BIS) )) + BAHREP - (BAHDEP * (1 - positif(ART1731BIS) )) + BIHNOV - (BIHDNV * (1 - positif(ART1731BIS) )) + BIHNOC - (BIHDNC * (1 - positif(ART1731BIS) )) + BIHNOP - (BIHDNP * (1 - positif(ART1731BIS) )) + BICHREV - (min(BICHDEV,BICHDEV1731+0) * positif(ART1731BIS) + BICHDEV * (1 - ART1731BIS)) + BICHREC - (min(BICHDEC,BICHDEC1731+0) * positif(ART1731BIS) + BICHDEC * (1 - ART1731BIS)) + BICHREP - (min(BICHDEP,BICHDEP1731+0) * positif(ART1731BIS) + BICHDEP * (1 - ART1731BIS)) + BNHREV - (BNHDEV * (1 - positif(ART1731BIS) )) + BNHREC - (BNHDEC * (1 - positif(ART1731BIS) )) + BNHREP - (BNHDEP * (1 - positif(ART1731BIS) )) + ANOCEP - (min(DNOCEP,DNOCEP1731+0) * positif(ART1731BIS) + DNOCEP * (1 - ART1731BIS)) + ANOVEP - (min(DNOCEPC,DNOCEPC1731+0) * positif(ART1731BIS) + DNOCEPC * (1 - ART1731BIS)) + ANOPEP - (min(DNOCEPP,DNOCEPP1731+0) * positif(ART1731BIS) + DNOCEPP * (1 - ART1731BIS)) ",
          "linecol": [
            312,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DEC_CGA_AGA",
          "linecol": [
            312,
            1
          ]
        },
        "linecol": [
          312,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(SUPREV * (BAFV + BAFC + BAFP)) + arr(SUPREV * max(0,BAHREV - (BAHDEV * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,BAHREC - (BAHDEC * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,BAHREP - (BAHDEP * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,BIHNOV - (BIHDNV * (1 - positif(ART1731BIS) )) )) + arr(SUPREV * max(0,BIHNOC - (BIHDNC * (1 - positif(ART1731BIS) )) )) + arr(SUPREV * max(0,BIHNOP - (BIHDNP * (1 - positif(ART1731BIS) )) )) + arr(SUPREV * max(0,BICHREV - (min(BICHDEV,BICHDEV1731+0) * positif(ART1731BIS) + BICHDEV * (1 - ART1731BIS)) )) + arr(SUPREV * max(0,BICHREC - (min(BICHDEC,BICHDEC1731+0) * positif(ART1731BIS) + BICHDEC * (1 - ART1731BIS)) )) + arr(SUPREV * max(0,BICHREP - (min(BICHDEP,BICHDEP1731+0) * positif(ART1731BIS) + BICHDEP * (1 - ART1731BIS)) )) + arr(SUPREV * max(0,BNHREV - (BNHDEV * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,BNHREC - (BNHDEC * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,BNHREP - (BNHDEP * (1 - positif(ART1731BIS) )))) + arr(SUPREV * max(0,ANOCEP - (min(DNOCEP,DNOCEP1731+0) * positif(ART1731BIS) + DNOCEP * (1 - ART1731BIS)))) + arr(SUPREV * max(0,ANOVEP - (min(DNOCEPC,DNOCEPC1731+0) * positif(ART1731BIS) + DNOCEPC * (1 - ART1731BIS)))) + arr(SUPREV * max(0,ANOPEP - (min(DNOCEPP,DNOCEPP1731+0) * positif(ART1731BIS) + DNOCEPP * (1 - ART1731BIS)))) ",
          "linecol": [
            329,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "MAJ_CGA_AGA",
          "linecol": [
            329,
            1
          ]
        },
        "linecol": [
          329,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "DEC_CGA_AGA + MAJ_CGA_AGA",
          "linecol": [
            346,
            15
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TOT_CGA_AGA",
          "linecol": [
            346,
            1
          ]
        },
        "linecol": [
          346,
          1
        ]
      }
    ],
    "applications": {
      "type": "symbol_enumeration",
      "value": [
        {
          "type": "symbol",
          "name": "iliad",
          "linecol": [
            311,
            15
          ]
        }
      ],
      "linecol": [
        311,
        15
      ]
    },
    "type": "regle_declaration",
    "qualifiers": []
  }
]
