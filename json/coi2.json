[
  {
    "type": "comment",
    "value": "#*************************************************************************************************************************",
    "linecol": [
      1,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      2,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Copyright or © or Copr.[DGFIP][2015]",
    "linecol": [
      3,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      4,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel a été initialement développé par la Direction Générale des ",
    "linecol": [
      5,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Finances Publiques pour permettre le calcul de l'impôt sur le revenu 2015 ",
    "linecol": [
      6,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#au titre des revenus perçus en 2014. La présente version a permis la ",
    "linecol": [
      7,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#génération du moteur de calcul des chaînes de taxation des rôles d'impôt ",
    "linecol": [
      8,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#sur le revenu de ce millésime.",
    "linecol": [
      9,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      10,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel est régi par la licence CeCILL 2.1 soumise au droit français ",
    "linecol": [
      11,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#et respectant les principes de diffusion des logiciels libres. Vous pouvez ",
    "linecol": [
      12,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#utiliser, modifier et/ou redistribuer ce programme sous les conditions de ",
    "linecol": [
      13,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#la licence CeCILL 2.1 telle que diffusée par le CEA, le CNRS et l'INRIA  sur ",
    "linecol": [
      14,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#le site \"http://www.cecill.info\".",
    "linecol": [
      15,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      16,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris ",
    "linecol": [
      17,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#connaissance de la licence CeCILL 2.1 et que vous en avez accepté les termes.",
    "linecol": [
      18,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      19,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#**************************************************************************************************************************",
    "linecol": [
      20,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                22,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                22,
                23
              ]
            }
          ],
          "linecol": [
            22,
            15
          ]
        }
      ],
      "linecol": [
        22,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et FRNV > (TSHALLOV + ALLOV) * 0.10 et RDSYVO > 0 et PRBRV + CARPEV + PENINV + CODRAZ + PALIV + PENSALV + 0 = 0  ",
          "linecol": [
            24,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I00101",
                "linecol": [
                  32,
                  14
                ]
              }
            ],
            "linecol": [
              32,
              7
            ]
          }
        ],
        "linecol": [
          23,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "2500",
      "linecol": [
        21,
        7
      ]
    },
    "linecol": [
      21,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                34,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                34,
                23
              ]
            }
          ],
          "linecol": [
            34,
            15
          ]
        }
      ],
      "linecol": [
        34,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et FRNC > (TSHALLOC + ALLOC) * 0.10 et RDSYCJ > 0 et PRBRC + CARPEC + PENINC + CODRBZ + PALIC + PENSALC + 0 = 0  ",
          "linecol": [
            36,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I00102",
                "linecol": [
                  44,
                  14
                ]
              }
            ],
            "linecol": [
              44,
              7
            ]
          }
        ],
        "linecol": [
          35,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "2501",
      "linecol": [
        33,
        7
      ]
    },
    "linecol": [
      33,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                46,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                46,
                22
              ]
            }
          ],
          "linecol": [
            46,
            15
          ]
        }
      ],
      "linecol": [
        46,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et ( ( ( ( FRN1 > (TSHALLO1 + ALLO1) *0.10) et (PRBR1 + CARPEP1 + PENIN1 + CODRCZ + PALI1 + PENSALP1 + 0 = 0) ) ou ( ( FRN2 > (TSHALLO2 + ALLO2) *0.10) et (PRBR2 + CARPEP2 + PENIN2 + CODRDZ + PALI2 + PENSALP2 + 0 = 0) ) ou ( ( FRN3 > (TSHALLO3 + ALLO3) *0.10) et (PRBR3 + CARPEP3 + PENIN3 + CODREZ + PALI3 + PENSALP3 + 0 = 0) ) ou ( ( FRN4 > (TSHALLO4 + ALLO4) *0.10) et (PRBR4 + CARPEP4 + PENIN4 + CODRFZ + PALI4 + PENSALP4 + 0 = 0) ) ) et RDSYPP > 0 ) ",
          "linecol": [
            48,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I00103",
                "linecol": [
                  73,
                  14
                ]
              }
            ],
            "linecol": [
              73,
              7
            ]
          }
        ],
        "linecol": [
          47,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "2502",
      "linecol": [
        45,
        7
      ]
    },
    "linecol": [
      45,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                75,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                75,
                23
              ]
            }
          ],
          "linecol": [
            75,
            15
          ]
        }
      ],
      "linecol": [
        75,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_COLBERT + APPLI_BATCH + APPLI_ILIAD = 1 et CHRFAC > 0 et CHNFAC + 0 = 0 et positif(NATIMP) = 1 et V_CNR = 0  ",
          "linecol": [
            78,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I008",
                "linecol": [
                  88,
                  14
                ]
              }
            ],
            "linecol": [
              88,
              7
            ]
          }
        ],
        "linecol": [
          77,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "2566",
      "linecol": [
        74,
        7
      ]
    },
    "linecol": [
      74,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                90,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                90,
                23
              ]
            }
          ],
          "linecol": [
            90,
            15
          ]
        }
      ],
      "linecol": [
        90,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_COLBERT + APPLI_BATCH + APPLI_ILIAD = 1 et RDCOM > 0 et NBACT + 0  = 0 et positif(NATIMP) = 1  ",
          "linecol": [
            93,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I009",
                "linecol": [
                  101,
                  14
                ]
              }
            ],
            "linecol": [
              101,
              7
            ]
          }
        ],
        "linecol": [
          92,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "2565",
      "linecol": [
        89,
        7
      ]
    },
    "linecol": [
      89,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                103,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                103,
                22
              ]
            }
          ],
          "linecol": [
            103,
            15
          ]
        }
      ],
      "linecol": [
        103,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et ( V_0AV  = 1 et ( ( positif(XETRANC) + positif(EXOCETC) + positif(FRNC) + positif(PENINC) + positif(CODRBZ) + positif(TSHALLOC) + positif(CODDBJ) + positif(CODEBJ) + positif(ALLOC) + positif(SALEXTC) + positif(COD1BD) + positif(COD1BE) + positif(PPEXTC) + positif(COD1BH) + positif(PRBC) + somme(i=2..4:positif(iPRBC)) + positif(PEBFC) + positif(CARTSC) + positif(REMPLAC) + positif(CARPEC) + positif(PENSALC) + somme (i=1..3: positif (GLDiC)) + somme (i=A: positif(BiFC) + somme(j=A: positif(Bi1jC))) + somme (i=H,C: somme(j= A,N: somme(k=R,D: positif(BjikEC))) + somme(j=N: positif(BIiDjC)) + positif(BIiNOC) ) + positif(BICREC) + positif(BI2AC) + positif(BICDEC) + positif(TSASSUC) + positif(PPETPC) + positif(PPENHC) + positif(GSALC) + positif(PCAPTAXC)  + positif( FEXC ) + positif( BAFC ) + positif( BAFORESTC ) + positif( BAFPVC ) + positif( BAF1AC ) + positif( BAEXC ) + positif( BACREC ) + positif( 4BACREC ) + positif( BA1AC ) + positif(BACDEC) + positif( BAHEXC ) + positif( BAHREC ) + positif( 4BAHREC ) + positif( BAHDEC ) + positif( BAPERPC ) + positif( BANOCGAC ) + positif( AUTOBICVC ) + positif( AUTOBICPC ) + positif( MIBEXC ) + positif( MIBVENC ) + positif( MIBPRESC ) + positif( MIBPVC ) + positif( MIB1AC ) + positif( MIBDEC ) + positif( BICEXC ) + positif( BICNOC ) + positif( LOCPROCGAC ) + positif( BI1AC ) + positif(BICDNC ) + positif( LOCDEFPROCGAC ) + positif( BIHEXC ) + positif( BIHNOC ) + positif( LOCPROC ) + positif( BIHDNC ) + positif( BIPERPC ) + positif( LOCDEFPROC ) + positif( MIBMEUC ) + positif( MIBGITEC ) + positif( MIBNPEXC ) + positif( MIBNPVENC ) + positif( MIBNPPRESC ) + positif( MIBNPPVC ) + positif( MIBNP1AC ) + positif( MIBNPDEC ) + positif( BICNPEXC ) + positif( BICREC ) + positif( LOCNPCGAC ) + positif( BI2AC ) + positif( LOCDEFNPCGAC) + positif( BICNPHEXC ) + positif( BICHREC ) + positif( LOCNPC ) + positif( BICHDEC) + positif(LOCDEFNPC) + positif( AUTOBNCC ) + positif( BNCPROEXC ) + positif( BNCPROC ) + positif( BNCPROPVC ) + positif( BNCPRO1AC ) + positif( BNCPRODEC ) + positif( BNCEXC ) + positif( BNCREC ) + positif( BN1AC ) + positif( BNCDEC ) + positif( BNHEXC ) + positif( BNHREC ) + positif( BNHDEC ) + positif ( BNCCRC ) + positif ( CESSASSC ) + positif( XHONOAAC ) + positif( XHONOC ) + positif( BNCNPC ) + positif( BNCNPPVC ) + positif( BNCNP1AC ) + positif( BNCNPDEC ) + positif( BNCNPREXAAC ) + positif( BNCAABC ) + positif( BNCNPREXC ) + positif( ANOVEP ) + positif( INVENTC ) + positif( PVINCE ) + positif( BNCAADC) + positif( DNOCEPC ) + positif( BNCCRFC ) + positif( RCSC ) + positif( BANOCGAC ) + positif( PVSOCC ) + positif( PPEACC ) + positif( PPENJC )  + positif( PERPC ) + positif( PERP_COTC ) + positif( RACCOTC ) + positif( PLAF_PERPC ) + positif ( PERPPLAFCC ) + positif ( PERPPLAFNUC1 ) + positif ( PERPPLAFNUC2 ) + positif ( PERPPLAFNUC3 ) + positif ( RDSYCJ ) + positif( ELURASC ) ) > 0 ) ) ",
          "linecol": [
            106,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I010",
                "linecol": [
                  169,
                  14
                ]
              }
            ],
            "linecol": [
              169,
              7
            ]
          }
        ],
        "linecol": [
          105,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3301",
      "linecol": [
        102,
        7
      ]
    },
    "linecol": [
      102,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                171,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                171,
                23
              ]
            }
          ],
          "linecol": [
            171,
            15
          ]
        }
      ],
      "linecol": [
        171,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et (V_0AM + V_0AO + 0 = 1) et V_0AS = 1 et V_0AP+0 = 0 et V_0AF+0 = 0 et V_ANREV - V_0DA < 75 et V_ANREV - V_0DB < 75  ",
          "linecol": [
            174,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I011",
                "linecol": [
                  182,
                  14
                ]
              }
            ],
            "linecol": [
              182,
              7
            ]
          }
        ],
        "linecol": [
          173,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3210",
      "linecol": [
        170,
        7
      ]
    },
    "linecol": [
      170,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                184,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                184,
                23
              ]
            }
          ],
          "linecol": [
            184,
            15
          ]
        }
      ],
      "linecol": [
        184,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS = 0 et (V_0AM + V_0AO + 0 = 0 ) et V_0AZ + 0 = 0 et V_0AP + 0 = 0 et V_0AW = 1 et V_ANREV - V_0DA < 75  ",
          "linecol": [
            187,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I012",
                "linecol": [
                  199,
                  14
                ]
              }
            ],
            "linecol": [
              199,
              7
            ]
          }
        ],
        "linecol": [
          186,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3221",
      "linecol": [
        183,
        7
      ]
    },
    "linecol": [
      183,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                201,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                201,
                23
              ]
            }
          ],
          "linecol": [
            201,
            15
          ]
        }
      ],
      "linecol": [
        201,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "APPLI_OCEANS + APPLI_COLBERT = 0 et ( V_BT0CF >0 et V_0CH >0 et positif(V_0CF+0) != 1 et V_BT0CF + 0 = somme(i=0..5:positif(V_BT0Fi+0)) et V_BT0CH + 0 = somme(i=0..5:positif(V_BT0Hi+0)) et V_0CF + 0 = somme(i=0..5:positif(V_0Fi+0)) et V_0CH + 0 = somme(i=0..5:positif(V_0Hi+0)) et ((     V_0CH < V_BT0CF   ) ou (     V_0CH = V_BT0CF et somme(i=0..5:V_0Hi+0) != somme(i=0..5:V_BT0Fi+0)         ) ou (     V_0CH = V_BT0CF et somme(i=0..5:V_0Hi+0) = somme(i=0..5:V_BT0Fi+0) et somme(i=0..5: (1/V_0Hi)) != somme(i=0..5: (1/V_BT0Fi))   ) ou (     V_0CH > V_BT0CF et somme(i=0..5:positif(somme(j=0..5:null(V_0Hj - V_BT0Fi)))*V_BT0Fi) != somme(i=0..5:V_BT0Fi) ) ou (     V_0CH > V_BT0CF et somme(i=0..5:positif(somme(j=0..5:null(V_0Hj - V_BT0Fi)))*V_BT0Fi) = somme(i=0..5:V_BT0Fi) et somme(i=0..5:positif(somme(j=0..5:null(V_0Hi - V_BT0Fj)))*V_0Hi) < somme(i=0..5:V_BT0Fi) ) ) ) et V_IND_TRAIT = 4  ",
          "linecol": [
            204,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I014",
                "linecol": [
                  236,
                  14
                ]
              }
            ],
            "linecol": [
              236,
              7
            ]
          }
        ],
        "linecol": [
          203,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3214",
      "linecol": [
        200,
        7
      ]
    },
    "linecol": [
      200,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                238,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                238,
                23
              ]
            }
          ],
          "linecol": [
            238,
            15
          ]
        }
      ],
      "linecol": [
        238,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "V_IND_TRAIT = 4 et V_REGCO != 2 et V_REGCO != 4 et ( DEFRCM + 0 > V_BTDFRCM1 + PLAF_PRECONS * (1 - positif(V_BTDFRCM1)) ou DEFRCM2 + 0 > V_BTDFRCM2 + PLAF_PRECONS * (1 - positif(V_BTDFRCM2)) ou DEFRCM3 + 0 > V_BTDFRCM3 + PLAF_PRECONS * (1 - positif(V_BTDFRCM3)) ou DEFRCM4 + 0 > V_BTDFRCM4 + PLAF_PRECONS * (1 - positif(V_BTDFRCM4)) ou DEFRCM5 + 0 > V_BTDFRCM5 + PLAF_PRECONS * (1 - positif(V_BTDFRCM5)) ou DEFRCM6 + 0 > V_BTDFRCM6 + PLAF_PRECONS * (1 - positif(V_BTDFRCM6)))  ",
          "linecol": [
            240,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I015",
                "linecol": [
                  259,
                  14
                ]
              }
            ],
            "linecol": [
              259,
              7
            ]
          }
        ],
        "linecol": [
          239,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3216",
      "linecol": [
        237,
        7
      ]
    },
    "linecol": [
      237,
      1
    ]
  },
  {
    "application": {
      "type": "applications_reference",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                261,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                261,
                23
              ]
            }
          ],
          "linecol": [
            261,
            15
          ]
        }
      ],
      "linecol": [
        261,
        1
      ]
    },
    "type": "verif_declaration",
    "conditions": [
      {
        "expression": {
          "type": "verif_declaration_condition_expression",
          "value": "V_IND_TRAIT > 0 et V_REGCO != 2 et V_REGCO != 4 et positif(PVSURSI + PVIMPOS + CODRWA + CODRWB + 0) = 1  ",
          "linecol": [
            264,
            4
          ]
        },
        "type": "verif_declaration_condition",
        "erreurs": [
          {
            "type": "verif_declaration_erreurs",
            "names": [
              {
                "type": "symbol",
                "name": "I016",
                "linecol": [
                  272,
                  14
                ]
              }
            ],
            "linecol": [
              272,
              7
            ]
          }
        ],
        "linecol": [
          263,
          1
        ]
      }
    ],
    "name": {
      "type": "symbol",
      "name": "3217",
      "linecol": [
        260,
        7
      ]
    },
    "linecol": [
      260,
      1
    ]
  }
]
