[
  {
    "type": "comment",
    "value": "#*************************************************************************************************************************",
    "linecol": [
      1,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      2,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Copyright or © or Copr.[DGFIP][2015]",
    "linecol": [
      3,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      4,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel a été initialement développé par la Direction Générale des ",
    "linecol": [
      5,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Finances Publiques pour permettre le calcul de l'impôt sur le revenu 2015 ",
    "linecol": [
      6,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#au titre des revenus perçus en 2014. La présente version a permis la ",
    "linecol": [
      7,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#génération du moteur de calcul des chaînes de taxation des rôles d'impôt ",
    "linecol": [
      8,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#sur le revenu de ce millésime.",
    "linecol": [
      9,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      10,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Ce logiciel est régi par la licence CeCILL 2.1 soumise au droit français ",
    "linecol": [
      11,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#et respectant les principes de diffusion des logiciels libres. Vous pouvez ",
    "linecol": [
      12,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#utiliser, modifier et/ou redistribuer ce programme sous les conditions de ",
    "linecol": [
      13,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#la licence CeCILL 2.1 telle que diffusée par le CEA, le CNRS et l'INRIA  sur ",
    "linecol": [
      14,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#le site \"http://www.cecill.info\".",
    "linecol": [
      15,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      16,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#Le fait que vous puissiez accéder à cet en-tête signifie que vous avez pris ",
    "linecol": [
      17,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#connaissance de la licence CeCILL 2.1 et que vous en avez accepté les termes.",
    "linecol": [
      18,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#",
    "linecol": [
      19,
      1
    ]
  },
  {
    "type": "comment",
    "value": "#**************************************************************************************************************************",
    "linecol": [
      20,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                22,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                22,
                23
              ]
            }
          ],
          "linecol": [
            22,
            15
          ]
        }
      ],
      "linecol": [
        22,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "arr(RCMABD * 40/100)",
          "linecol": [
            23,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMRABD",
          "linecol": [
            23,
            1
          ]
        },
        "linecol": [
          23,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(REVACT * 40/100)",
          "linecol": [
            25,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCMRABD",
          "linecol": [
            25,
            1
          ]
        },
        "linecol": [
          25,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMRABD + 2RCMRABD",
          "linecol": [
            27,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRCMRABD",
          "linecol": [
            27,
            1
          ]
        },
        "linecol": [
          27,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(RCMTNC * 40/100)",
          "linecol": [
            28,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMRTNC",
          "linecol": [
            28,
            1
          ]
        },
        "linecol": [
          28,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(REVPEA * 40/100)",
          "linecol": [
            30,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCMRTNC",
          "linecol": [
            30,
            1
          ]
        },
        "linecol": [
          30,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMRTNC + 2RCMRTNC",
          "linecol": [
            32,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRCMRTNC",
          "linecol": [
            32,
            1
          ]
        },
        "linecol": [
          32,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMABD - RCMRABD",
          "linecol": [
            33,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMRNABD",
          "linecol": [
            33,
            1
          ]
        },
        "linecol": [
          33,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "REVACT - 2RCMRABD",
          "linecol": [
            35,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCMRNABD",
          "linecol": [
            35,
            1
          ]
        },
        "linecol": [
          35,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMTNC - RCMRTNC",
          "linecol": [
            36,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMRNTNC",
          "linecol": [
            36,
            1
          ]
        },
        "linecol": [
          36,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "REVPEA - 2RCMRTNC",
          "linecol": [
            38,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCMRNTNC",
          "linecol": [
            38,
            1
          ]
        },
        "linecol": [
          38,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(REGPRIV * MAJREV)",
          "linecol": [
            39,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REGPRIVM",
          "linecol": [
            39,
            1
          ]
        },
        "linecol": [
          39,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "arr(RESTUC * MAJREV)",
          "linecol": [
            41,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2REGPRIVM",
          "linecol": [
            41,
            1
          ]
        },
        "linecol": [
          41,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMABD + REVACT",
          "linecol": [
            42,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRCMABD",
          "linecol": [
            42,
            1
          ]
        },
        "linecol": [
          42,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMRNABD + 2RCMRNABD",
          "linecol": [
            43,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMAB",
          "linecol": [
            43,
            1
          ]
        },
        "linecol": [
          43,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMTNC + REVPEA",
          "linecol": [
            44,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DRTNC",
          "linecol": [
            44,
            1
          ]
        },
        "linecol": [
          44,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMRNTNC + 2RCMRNTNC",
          "linecol": [
            45,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RTNC",
          "linecol": [
            45,
            1
          ]
        },
        "linecol": [
          45,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMAV + PROVIE",
          "linecol": [
            46,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RAVC",
          "linecol": [
            46,
            1
          ]
        },
        "linecol": [
          46,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMHAD + DISQUO",
          "linecol": [
            47,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMNAB",
          "linecol": [
            47,
            1
          ]
        },
        "linecol": [
          47,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMHAB + INTERE",
          "linecol": [
            48,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RTCAR",
          "linecol": [
            48,
            1
          ]
        },
        "linecol": [
          48,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "REGPRIV + RESTUC",
          "linecol": [
            49,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMPRIV",
          "linecol": [
            49,
            1
          ]
        },
        "linecol": [
          49,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "REGPRIVM + 2REGPRIVM",
          "linecol": [
            50,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMPRIVM",
          "linecol": [
            50,
            1
          ]
        },
        "linecol": [
          50,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "min(RCMAB + RTNC + RAVC + RCMNAB + RTCAR + RCMPRIVM,RCMFR)",
          "linecol": [
            51,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMFRTEMP",
          "linecol": [
            51,
            1
          ]
        },
        "linecol": [
          51,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMAB + RTNC + RAVC + RCMNAB + RTCAR + RCMPRIVM",
          "linecol": [
            52,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "BRCMBIS",
          "linecol": [
            52,
            1
          ]
        },
        "linecol": [
          52,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82000",
      "linecol": [
        21,
        7
      ]
    },
    "linecol": [
      21,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                54,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                54,
                23
              ]
            }
          ],
          "linecol": [
            54,
            15
          ]
        }
      ],
      "linecol": [
        54,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "positif(RCMABD) * (null(4-V_IND_TRAIT) * ( positif(REVACT+RTCAR+RCMNAB) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) * RCMABD / max (1,TRCMABD + RTCAR+RCMNAB)) + (1 - positif(REVACT+RTCAR+RCMNAB)) * (RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) ) + null(5-V_IND_TRAIT) * ( positif(REVACT+RTCAR+RCMNAB) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS ) * RCMABD / max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(REVACT+RTCAR+RCMNAB)) * (RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) ) )",
          "linecol": [
            55,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRAN",
          "linecol": [
            55,
            1
          ]
        },
        "linecol": [
          55,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REVACT) * ( null(4-V_IND_TRAIT) * ( positif(RTCAR+RCMNAB) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) * REVACT/ max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(RTCAR+RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) - FRAN) ) + null(5-V_IND_TRAIT) * ( positif(RTCAR+RCMNAB)* arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P+0),BRCMTOT1731+0))*ART1731BIS ) * REVACT/ max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(RTCAR+RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P+0),BRCMTOT1731+0))*ART1731BIS) - FRAN) ) )",
          "linecol": [
            73,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2FRAN",
          "linecol": [
            73,
            1
          ]
        },
        "linecol": [
          73,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(RCMHAB) * ( null(4-V_IND_TRAIT) * ( positif(INTERE+RCMNAB) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) * RCMHAB / max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(INTERE+RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) - FRAN - 2FRAN)) + null(5-V_IND_TRAIT) * ( positif(INTERE+RCMNAB) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) * RCMHAB / max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(INTERE+RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) - FRAN - 2FRAN)))",
          "linecol": [
            90,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRAR",
          "linecol": [
            90,
            1
          ]
        },
        "linecol": [
          90,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(INTERE) * ( null(4-V_IND_TRAIT) * ( positif(RCMNAB)* arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) * INTERE/ max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) -FRAN-2FRAN-FRAR)) + null(5-V_IND_TRAIT) * ( positif(RCMNAB)* arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) * INTERE/ max (1,TRCMABD + RTCAR+RCMNAB) ) + (1 - positif(RCMNAB)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) -FRAN-2FRAN-FRAR)))",
          "linecol": [
            99,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2FRAR",
          "linecol": [
            99,
            1
          ]
        },
        "linecol": [
          99,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(RCMHAD) * ( null(4-V_IND_TRAIT) * ( positif(DISQUO) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) * RCMHAD / max (1,TRCMABD + RTCAR + RCMNAB)) + (1 - positif(DISQUO)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) - FRAN - 2FRAN - FRAR - 2FRAR))  + null(5-V_IND_TRAIT) * ( positif(DISQUO) * arr((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS ) * RCMHAD / max (1,TRCMABD + RTCAR + RCMNAB) ) + (1 - positif(DISQUO)) * ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) - FRAN - 2FRAN - FRAR - 2FRAR ) ) )",
          "linecol": [
            106,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRAU",
          "linecol": [
            106,
            1
          ]
        },
        "linecol": [
          106,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "null(4-V_IND_TRAIT) * (((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,BRCMTOT+0)*ART1731BIS) - FRAN - 2FRAN - FRAR - 2FRAR - FRAU ) * positif(DISQUO)) + null(5-V_IND_TRAIT) * ( ((RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS) - FRAN - 2FRAN - FRAR - 2FRAR - FRAU ) * positif(DISQUO))",
          "linecol": [
            120,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2FRAU",
          "linecol": [
            120,
            1
          ]
        },
        "linecol": [
          120,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82001",
      "linecol": [
        53,
        7
      ]
    },
    "linecol": [
      53,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                125,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                125,
                23
              ]
            }
          ],
          "linecol": [
            125,
            15
          ]
        }
      ],
      "linecol": [
        125,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (RCMRNABD - FRAN) + positif(EXFR) * 0",
          "linecol": [
            126,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RAN",
          "linecol": [
            126,
            1
          ]
        },
        "linecol": [
          126,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (2RCMRNABD - 2FRAN) + positif(EXFR) * 0",
          "linecol": [
            128,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RAN",
          "linecol": [
            128,
            1
          ]
        },
        "linecol": [
          128,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "1RAN + 2RAN",
          "linecol": [
            130,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRAN",
          "linecol": [
            130,
            1
          ]
        },
        "linecol": [
          130,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (RCMHAB - FRAR) + positif(EXFR) * 0",
          "linecol": [
            131,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RAR",
          "linecol": [
            131,
            1
          ]
        },
        "linecol": [
          131,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (INTERE - 2FRAR) + positif(EXFR) * 0",
          "linecol": [
            133,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RAR",
          "linecol": [
            133,
            1
          ]
        },
        "linecol": [
          133,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "1RAR + 2RAR",
          "linecol": [
            134,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRAR",
          "linecol": [
            134,
            1
          ]
        },
        "linecol": [
          134,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (RCMHAD - FRAU) + positif(EXFR) * 0",
          "linecol": [
            135,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RAU",
          "linecol": [
            135,
            1
          ]
        },
        "linecol": [
          135,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(1 - positif(EXFR)) * (DISQUO - 2FRAU) + positif(EXFR) * 0",
          "linecol": [
            137,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RAU",
          "linecol": [
            137,
            1
          ]
        },
        "linecol": [
          137,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "1RAU + 2RAU",
          "linecol": [
            138,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRAU",
          "linecol": [
            138,
            1
          ]
        },
        "linecol": [
          138,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82002",
      "linecol": [
        124,
        7
      ]
    },
    "linecol": [
      124,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                140,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                140,
                23
              ]
            }
          ],
          "linecol": [
            140,
            15
          ]
        }
      ],
      "linecol": [
        140,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "min( ABTAV , RAVC)",
          "linecol": [
            141,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ABRCM2",
          "linecol": [
            141,
            1
          ]
        },
        "linecol": [
          141,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82003",
      "linecol": [
        139,
        7
      ]
    },
    "linecol": [
      139,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                143,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                143,
                23
              ]
            }
          ],
          "linecol": [
            143,
            15
          ]
        }
      ],
      "linecol": [
        143,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "positif(RCMAV) * arr( ABRCM2 * RCMAV / RAVC )",
          "linecol": [
            144,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ABAVC",
          "linecol": [
            144,
            1
          ]
        },
        "linecol": [
          144,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(PROVIE) * min(arr( ABRCM2 * PROVIE / RAVC ) , ABRCM2 - ABAVC)",
          "linecol": [
            145,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2ABAVC",
          "linecol": [
            145,
            1
          ]
        },
        "linecol": [
          145,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "ABAVC + 2ABAVC",
          "linecol": [
            146,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TABAVC",
          "linecol": [
            146,
            1
          ]
        },
        "linecol": [
          146,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82007",
      "linecol": [
        142,
        7
      ]
    },
    "linecol": [
      142,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                148,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                148,
                23
              ]
            }
          ],
          "linecol": [
            148,
            15
          ]
        }
      ],
      "linecol": [
        148,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "RTNC",
          "linecol": [
            149,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RNTNC",
          "linecol": [
            149,
            1
          ]
        },
        "linecol": [
          149,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RAVC - TABAVC",
          "linecol": [
            150,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RNAVC",
          "linecol": [
            150,
            1
          ]
        },
        "linecol": [
          150,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82008",
      "linecol": [
        147,
        7
      ]
    },
    "linecol": [
      147,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                152,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                152,
                23
              ]
            }
          ],
          "linecol": [
            152,
            15
          ]
        }
      ],
      "linecol": [
        152,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "null(4- V_IND_TRAIT)* PREM8_11 * max( 0, min(RCMFR,BRCMBIS)) + null(5-V_IND_TRAIT) * max( 0, min(RCMFR,max(BRCM1731,max(BRCM_P,BRCMP2))))",
          "linecol": [
            153,
            16
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMFRART1731",
          "linecol": [
            153,
            1
          ]
        },
        "linecol": [
          153,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "820091",
      "linecol": [
        151,
        7
      ]
    },
    "linecol": [
      151,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                156,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                156,
                23
              ]
            }
          ],
          "linecol": [
            156,
            15
          ]
        }
      ],
      "linecol": [
        156,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "max( 0, RCMFR*(1-positif(ART1731BIS))+min(RCMFR,max(max(BRCMTOTP2,BRCMTOT_P),BRCMTOT1731+0))*ART1731BIS - RCMAB - RTCAR - RCMNAB)",
          "linecol": [
            157,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "EXFR",
          "linecol": [
            157,
            1
          ]
        },
        "linecol": [
          157,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "820093",
      "linecol": [
        155,
        7
      ]
    },
    "linecol": [
      155,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                159,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                159,
                23
              ]
            }
          ],
          "linecol": [
            159,
            15
          ]
        }
      ],
      "linecol": [
        159,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "1RAN",
          "linecol": [
            160,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RIA",
          "linecol": [
            160,
            1
          ]
        },
        "linecol": [
          160,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "2RAN",
          "linecol": [
            161,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RIA",
          "linecol": [
            161,
            1
          ]
        },
        "linecol": [
          161,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "RCMRNTNC",
          "linecol": [
            162,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RNC",
          "linecol": [
            162,
            1
          ]
        },
        "linecol": [
          162,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "2RCMRNTNC",
          "linecol": [
            163,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RNC",
          "linecol": [
            163,
            1
          ]
        },
        "linecol": [
          163,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max ( 0 , RCMAV-ABAVC)",
          "linecol": [
            164,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCAV",
          "linecol": [
            164,
            1
          ]
        },
        "linecol": [
          164,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max ( 0 , PROVIE-2ABAVC)",
          "linecol": [
            165,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCAV",
          "linecol": [
            165,
            1
          ]
        },
        "linecol": [
          165,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max( 0 , REGPRIVM)",
          "linecol": [
            166,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RAO",
          "linecol": [
            166,
            1
          ]
        },
        "linecol": [
          166,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max( 0 , 2REGPRIVM)",
          "linecol": [
            167,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RAO",
          "linecol": [
            167,
            1
          ]
        },
        "linecol": [
          167,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,COD2FA)",
          "linecol": [
            168,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "R2FA",
          "linecol": [
            168,
            1
          ]
        },
        "linecol": [
          168,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "1RNC + RCAV + 1RAO",
          "linecol": [
            169,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRCM1",
          "linecol": [
            169,
            1
          ]
        },
        "linecol": [
          169,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "TRCM1 + 2RNC + 2RCAV + 2RAO",
          "linecol": [
            170,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "TRCM",
          "linecol": [
            170,
            1
          ]
        },
        "linecol": [
          170,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82010",
      "linecol": [
        158,
        7
      ]
    },
    "linecol": [
      158,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                172,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                172,
                23
              ]
            }
          ],
          "linecol": [
            172,
            15
          ]
        }
      ],
      "linecol": [
        172,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "positif(EXFR) * arr( (EXFR * TRCM1)/ TRCM) + (1 - positif(EXFR)) * 0",
          "linecol": [
            173,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRG1",
          "linecol": [
            173,
            1
          ]
        },
        "linecol": [
          173,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(EXFR) * min(arr(EXFR * 2RNC/ TRCM), EXFR - FRG1) + (1 - positif(EXFR)) * 0",
          "linecol": [
            175,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRG2",
          "linecol": [
            175,
            1
          ]
        },
        "linecol": [
          175,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(EXFR) * min(arr(EXFR * 2RCAV/ TRCM), EXFR - FRG1 - FRG2) + (1 - positif(EXFR)) * 0",
          "linecol": [
            177,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRG3",
          "linecol": [
            177,
            1
          ]
        },
        "linecol": [
          177,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(EXFR) * max(0,EXFR - FRG1 -FRG2 - FRG3) + (1 - positif(EXFR)) * 0",
          "linecol": [
            179,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "FRG5",
          "linecol": [
            179,
            1
          ]
        },
        "linecol": [
          179,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82011",
      "linecol": [
        171,
        7
      ]
    },
    "linecol": [
      171,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                182,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                182,
                23
              ]
            }
          ],
          "linecol": [
            182,
            15
          ]
        }
      ],
      "linecol": [
        182,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(positif(RCMAB + RTCAR + RCMNAB) * (1 - positif(RTNC+RAVC+RCMPRIVM)) * max(0, RCMFR - RCMAB - RTCAR - RCMNAB)  + (1 - positif(RCMAB + RTCAR + RCMNAB)) * positif(RTNC+RAVC+RCMPRIVM) * max(0, RCMFR - RTNC - (RAVC - TABAVC) - RCMPRIVM) + positif(RCMAB + RTCAR + RCMNAB) * positif(RTNC+RAVC+RCMPRIVM) * max(0, RCMFR - RCMAB - RCMNAB - RTNC - (RAVC - TABAVC) - RTCAR - RCMPRIVM) + (1 - positif(RCMAB + RTCAR + RCMNAB)) * (1 - positif(RTNC+RAVC+RCMPRIVM)) * max(0, RCMFR))",
          "linecol": [
            183,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCMNBIS",
          "linecol": [
            183,
            1
          ]
        },
        "linecol": [
          183,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "DFRCMNBIS * (1-positif(ART1731BIS)) + (RCMFR - RCMFRART1731) * positif(ART1731BIS)",
          "linecol": [
            208,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCMN",
          "linecol": [
            208,
            1
          ]
        },
        "linecol": [
          208,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82012",
      "linecol": [
        181,
        7
      ]
    },
    "linecol": [
      181,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                211,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                211,
                23
              ]
            }
          ],
          "linecol": [
            211,
            15
          ]
        }
      ],
      "linecol": [
        211,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0) dans (1,3,5,6,7) ) alors  (((1-positif(DFRCMN)) * (1RIA+1RNC+1RAR+1RAU+1RAO+RCAV-FRG1) -positif(DFRCMN)*0 ) * (1-positif(ART1731BIS)) + (positif(ART1731BIS) * (1RIA+1RNC+1RAR+1RAU+1RAO+RCAV-FRG1) -positif(DFRCMN)*0)) sinon (0) finsi",
          "linecol": [
            212,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "1RCM_I",
          "linecol": [
            212,
            1
          ]
        },
        "linecol": [
          212,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors ((1- positif(DFRCMN)) * 2RIA * (1-positif(ART1731BIS)) + 2RIA * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            218,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCM_I",
          "linecol": [
            218,
            1
          ]
        },
        "linecol": [
          218,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors  ((1- positif(DFRCMN)) * (2RNC-FRG2) * (1-positif(ART1731BIS)) + (2RNC-FRG2) * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            223,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "3RCM_I",
          "linecol": [
            223,
            1
          ]
        },
        "linecol": [
          223,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors  ((1- positif(DFRCMN)) * (2RCAV-FRG3) * (1-positif(ART1731BIS)) +  (2RCAV-FRG3) * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            228,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "4RCM_I",
          "linecol": [
            228,
            1
          ]
        },
        "linecol": [
          228,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors ((1- positif(DFRCMN)) * 2RAU * (1-positif(ART1731BIS)) + 2RAU * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            233,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "5RCM_I",
          "linecol": [
            233,
            1
          ]
        },
        "linecol": [
          233,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors  ((1- positif(DFRCMN)) * (2RAO-FRG5) * (1-positif(ART1731BIS)) +   (2RAO-FRG5) * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            238,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "6RCM_I",
          "linecol": [
            238,
            1
          ]
        },
        "linecol": [
          238,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors  ((1- positif(DFRCMN)) * 2RAR * (1-positif(ART1731BIS)) +   2RAR * positif(ART1731BIS)) sinon (0) finsi",
          "linecol": [
            243,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "7RCM_I",
          "linecol": [
            243,
            1
          ]
        },
        "linecol": [
          243,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "1RCM_I + 2RCM_I + 3RCM_I + 4RCM_I + 5RCM_I + 6RCM_I + 7RCM_I",
          "linecol": [
            248,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCM_I",
          "linecol": [
            248,
            1
          ]
        },
        "linecol": [
          248,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82013",
      "linecol": [
        210,
        7
      ]
    },
    "linecol": [
      210,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                250,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                250,
                23
              ]
            }
          ],
          "linecol": [
            250,
            15
          ]
        }
      ],
      "linecol": [
        250,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6)",
          "linecol": [
            251,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM",
          "linecol": [
            251,
            1
          ]
        },
        "linecol": [
          251,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,BRCM + BRCMQ - RCMFR)",
          "linecol": [
            252,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCMB",
          "linecol": [
            252,
            1
          ]
        },
        "linecol": [
          252,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6) * (1-positif(ART1731BIS)) +  min(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6,max(REPRCM1731,max(REPRCM_P,REPRCMP2))) * ART1731BIS * (1-PREM8_11) +  0 * ART1731BIS * PREM8_11",
          "linecol": [
            253,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCMBIS",
          "linecol": [
            253,
            1
          ]
        },
        "linecol": [
          253,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * arr( (REPRCMBIS * 1RCM_I)/ RCM_I) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            256,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM1",
          "linecol": [
            256,
            1
          ]
        },
        "linecol": [
          256,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * min(arr((REPRCMBIS * 2RCM_I)/ RCM_I), REPRCMBIS - REPRCM1) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            258,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM2",
          "linecol": [
            258,
            1
          ]
        },
        "linecol": [
          258,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * min(arr((REPRCMBIS * 3RCM_I)/ RCM_I), REPRCMBIS - REPRCM1 - REPRCM2) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            260,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM3",
          "linecol": [
            260,
            1
          ]
        },
        "linecol": [
          260,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * min(arr((REPRCMBIS * 4RCM_I)/ RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            262,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM4",
          "linecol": [
            262,
            1
          ]
        },
        "linecol": [
          262,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * min(arr((REPRCMBIS * 5RCM_I)/ RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3 - REPRCM4) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            264,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM5",
          "linecol": [
            264,
            1
          ]
        },
        "linecol": [
          264,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * min(arr((REPRCMBIS * 6RCM_I)/ RCM_I), REPRCMBIS - REPRCM1 - REPRCM2 - REPRCM3 - REPRCM4 - REPRCM5) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            266,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM6",
          "linecol": [
            266,
            1
          ]
        },
        "linecol": [
          266,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "positif(REPRCMBIS) * max(0,REPRCMBIS - REPRCM1 -REPRCM2 - REPRCM3 - REPRCM4 - REPRCM5  - REPRCM6 ) + (1 - positif(REPRCMBIS)) * 0",
          "linecol": [
            268,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "REPRCM7",
          "linecol": [
            268,
            1
          ]
        },
        "linecol": [
          268,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82014",
      "linecol": [
        249,
        7
      ]
    },
    "linecol": [
      249,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                271,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                271,
                23
              ]
            }
          ],
          "linecol": [
            271,
            15
          ]
        }
      ],
      "linecol": [
        271,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM6 * positif(DFRCMN) + DEFRCM6 * positif(DEFRCM+DEFRCM2+DEFRCM3+DEFRCM4+DEFRCM5- RCM_I) * (1-positif(DFRCMN)) + max( 0, DEFRCM6 - (RCM_I -DEFRCM- DEFRCM2-DEFRCM3-DEFRCM4-DEFRCM5)) * positif_ou_nul(RCM_I -DEFRCM-DEFRCM2-DEFRCM3-DEFRCM4-DEFRCM5) * (1-positif(DFRCMN))) * (1-positif(ART1731BIS)) + min(DEFRCM6,REPRCM - REPRCMBIS) * positif(ART1731BIS*(1-PREM8_11)) + DEFRCM6 * positif(ART1731BIS*PREM8_11)",
          "linecol": [
            272,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM5",
          "linecol": [
            272,
            1
          ]
        },
        "linecol": [
          272,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM5 * positif(DFRCMN) + DEFRCM5 * positif(DEFRCM+DEFRCM2+DEFRCM3+DEFRCM4- RCM_I) * (1-positif(DFRCMN)) + max( 0, DEFRCM5 - (RCM_I -DEFRCM- DEFRCM2-DEFRCM3-DEFRCM4)) * positif_ou_nul(RCM_I -DEFRCM- DEFRCM2-DEFRCM3-DEFRCM4) * (1-positif(DFRCMN))) * (1-positif(ART1731BIS)) + min(DEFRCM5,REPRCM - REPRCMBIS - DFRCM5 ) * positif(ART1731BIS*(1-PREM8_11)) + DEFRCM5 * positif(ART1731BIS*PREM8_11)",
          "linecol": [
            279,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM4",
          "linecol": [
            279,
            1
          ]
        },
        "linecol": [
          279,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM4 * positif(DFRCMN) + DEFRCM4 * positif(DEFRCM+DEFRCM2+DEFRCM3- RCM_I) * (1-positif(DFRCMN)) + max( 0, DEFRCM4 - (RCM_I -DEFRCM)) * positif_ou_nul(RCM_I -DEFRCM-DEFRCM2-DEFRCM3) * (1-positif(DFRCMN))) * (1-positif(ART1731BIS)) + min(DEFRCM4,REPRCM - REPRCMBIS - DFRCM5 - DFRCM4 ) * positif(ART1731BIS*(1-PREM8_11)) + DEFRCM4 * positif(ART1731BIS*PREM8_11)",
          "linecol": [
            286,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM3",
          "linecol": [
            286,
            1
          ]
        },
        "linecol": [
          286,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM3 * positif(DFRCMN) + DEFRCM3 * positif(DEFRCM+DEFRCM2- RCM_I) * (1-positif(DFRCMN)) + max( 0, DEFRCM3 - (RCM_I -DEFRCM)) * positif_ou_nul(RCM_I -DEFRCM-DEFRCM2) * (1-positif(DFRCMN))) * (1-positif(ART1731BIS)) + min(DEFRCM3,REPRCM - REPRCMBIS - DFRCM5 - DFRCM4-DFRCM3) * positif(ART1731BIS*(1-PREM8_11)) + DEFRCM3 * positif(ART1731BIS*PREM8_11)",
          "linecol": [
            292,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM2",
          "linecol": [
            292,
            1
          ]
        },
        "linecol": [
          292,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DEFRCM2 * positif(DFRCMN) + DEFRCM2 * positif(DEFRCM - RCM_I) * (1-positif(DFRCMN)) + max( 0, DEFRCM2 - (RCM_I-DEFRCM)) * positif_ou_nul(RCM_I-DEFRCM) * (1-positif(DFRCMN))) * (1-positif(ART1731BIS)) + min(DEFRCM2,REPRCM - REPRCMBIS  - DFRCM5 - DFRCM4-DFRCM3-DFRCM2) * positif(ART1731BIS*(1-PREM8_11)) + DEFRCM2 * positif(ART1731BIS*PREM8_11)",
          "linecol": [
            298,
            11
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM1",
          "linecol": [
            298,
            1
          ]
        },
        "linecol": [
          298,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82015",
      "linecol": [
        270,
        7
      ]
    },
    "linecol": [
      270,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                305,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                305,
                23
              ]
            }
          ],
          "linecol": [
            305,
            15
          ]
        }
      ],
      "linecol": [
        305,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1-positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(1RCM_I-REPRCM1)) -positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)*0 ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(1RCM_I-REPRCM1)) ) sinon (0) finsi",
          "linecol": [
            306,
            7
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCM",
          "linecol": [
            306,
            1
          ]
        },
        "linecol": [
          306,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "COD2FA * (1 - positif(null(2-V_REGCO) + null(4-V_REGCO)))",
          "linecol": [
            314,
            10
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCM2FA",
          "linecol": [
            314,
            1
          ]
        },
        "linecol": [
          314,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(2RCM_I-REPRCM2)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(2RCM_I-REPRCM2)) ) sinon (0) finsi",
          "linecol": [
            315,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "2RCM",
          "linecol": [
            315,
            1
          ]
        },
        "linecol": [
          315,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(3RCM_I-REPRCM3)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(3RCM_I-REPRCM3)) ) sinon (0) finsi",
          "linecol": [
            322,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "3RCM",
          "linecol": [
            322,
            1
          ]
        },
        "linecol": [
          322,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(4RCM_I-REPRCM4)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(4RCM_I-REPRCM4)) ) sinon (0) finsi",
          "linecol": [
            329,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "4RCM",
          "linecol": [
            329,
            1
          ]
        },
        "linecol": [
          329,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(5RCM_I-REPRCM5)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(5RCM_I-REPRCM5)) ) sinon (0) finsi",
          "linecol": [
            336,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "5RCM",
          "linecol": [
            336,
            1
          ]
        },
        "linecol": [
          336,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(6RCM_I-REPRCM6)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(6RCM_I-REPRCM6)) ) sinon (0) finsi",
          "linecol": [
            343,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "6RCM",
          "linecol": [
            343,
            1
          ]
        },
        "linecol": [
          343,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "si( (V_REGCO + 0)  dans (1,3,5,6,7)) alors (( (1- positif(DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5)) * max(0,(7RCM_I-REPRCM7)) ) * (1-positif(ART1731BIS)) + positif(ART1731BIS) * max(0,(7RCM_I-REPRCM7)) ) sinon (0) finsi",
          "linecol": [
            350,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "7RCM",
          "linecol": [
            350,
            1
          ]
        },
        "linecol": [
          350,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "(DFRCMN + DFRCM1+DFRCM2+DFRCM3+DFRCM4+DFRCM5) * (1-positif(null(2-V_REGCO)+null(4-V_REGCO)))",
          "linecol": [
            357,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "DFRCM",
          "linecol": [
            357,
            1
          ]
        },
        "linecol": [
          357,
          1
        ]
      },
      {
        "expression": {
          "type": "expression",
          "value": "max(0,TRCMRABD + TRCMRTNC) * (1 - positif(null(2-V_REGCO) + null(4-V_REGCO)))",
          "linecol": [
            358,
            13
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "RCMEXCREF",
          "linecol": [
            358,
            1
          ]
        },
        "linecol": [
          358,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82016",
      "linecol": [
        304,
        7
      ]
    },
    "linecol": [
      304,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                360,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                360,
                23
              ]
            }
          ],
          "linecol": [
            360,
            15
          ]
        }
      ],
      "linecol": [
        360,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "PLAF_RCMAV1 * (1 + BOOL_0AM)",
          "linecol": [
            361,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "ABTAV",
          "linecol": [
            361,
            1
          ]
        },
        "linecol": [
          361,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82100",
      "linecol": [
        359,
        7
      ]
    },
    "linecol": [
      359,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                363,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                363,
                23
              ]
            }
          ],
          "linecol": [
            363,
            15
          ]
        }
      ],
      "linecol": [
        363,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "(min( RCMLIB, max(0 , ABTAV - RAVC) ) * (1 - V_CNR))",
          "linecol": [
            364,
            9
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "BPLIB",
          "linecol": [
            364,
            1
          ]
        },
        "linecol": [
          364,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82107",
      "linecol": [
        362,
        7
      ]
    },
    "linecol": [
      362,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                366,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                366,
                23
              ]
            }
          ],
          "linecol": [
            366,
            15
          ]
        }
      ],
      "linecol": [
        366,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "arr(BPLIB * TX_PREVLIB/100)",
          "linecol": [
            367,
            8
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "EPAV",
          "linecol": [
            367,
            1
          ]
        },
        "linecol": [
          367,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82110",
      "linecol": [
        365,
        7
      ]
    },
    "linecol": [
      365,
      1
    ]
  },
  {
    "application": {
      "type": "regle_application",
      "names": [
        {
          "type": "symbol_enumeration",
          "value": [
            {
              "type": "symbol",
              "name": "iliad",
              "linecol": [
                369,
                15
              ]
            },
            {
              "type": "symbol",
              "name": "batch",
              "linecol": [
                369,
                23
              ]
            }
          ],
          "linecol": [
            369,
            15
          ]
        }
      ],
      "linecol": [
        369,
        1
      ]
    },
    "variables": [
      {
        "expression": {
          "type": "expression",
          "value": "min(DEFRCM + DEFRCM2 + DEFRCM3 + DEFRCM4 + DEFRCM5 + DEFRCM6,1RCM_I + 2RCM_I +3RCM_I +4RCM_I +5RCM_I +6RCM_I +7RCM_I )",
          "linecol": [
            370,
            12
          ]
        },
        "type": "variable_definition",
        "name": {
          "type": "symbol",
          "name": "VAREPRCM",
          "linecol": [
            370,
            1
          ]
        },
        "linecol": [
          370,
          1
        ]
      }
    ],
    "type": "regle_declaration",
    "name": {
      "type": "symbol",
      "name": "82111",
      "linecol": [
        368,
        7
      ]
    },
    "linecol": [
      368,
      1
    ]
  }
]
